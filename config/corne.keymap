/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Layer definitions
#define LYR_BASE 0
#define LYR_NUM  1
#define LYR_NAV  2
#define LYR_MOU  3
#define LYR_FUNC 4
#define LYR_BLU  5

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
        n2: num_2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp LBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n3: num_3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n5: num_5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp LPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n6: num_6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n8: num_8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n9: num_9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dollar_caret: dollar_caret {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "base";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q       &kp W        &kp E        &kp R        &kp T        &kp Y      &kp U        &kp I        &kp O       &kp P           &none
&none  &hml LGUI A &hml LALT S  &hml LCTRL D &hml LSHFT F &kp G        &kp H      &hmr RSHFT J &hmr RCTRL K &hmr RALT L &hmr RGUI SEMI  &none
&none  &kp Z       &kp X        &kp C        &kp V        &kp B        &kp N      &kp M        &kp COMMA    &kp DOT     &kp FSLH        &none
                                &mo LYR_MOU  &lt LYR_NAV ESCAPE  &kp SPACE    &kp RET  &lt LYR_NUM LC(F)  &lt LYR_FUNC DEL
            >;
        };

        num {
            display-name = "num";

            bindings = <
&none  &kp AMPERSAND  &kp N7  &n8             &n9     &kp GRAVE    &kp AT   &kp ASTERISK     &kp HASH   &kp PERCENT  &kp COLON      &none
&none  &dollar_caret  &kp N4  &n5             &n6     &kp TILDE    &kp EXCL &mt RSHFT EQUAL  &kp MINUS  &kp BSLH     &kp SEMICOLON  &none
&none  &kp N0         &kp N1  &n2             &n3     &none        &kp SQT  &kp DQT          &kp COMMA  &kp DOT      &kp FSLH       &none
                              &trans          &trans  &trans       &trans   &trans           &trans
            >;
        };

        nav {
            bindings = <
&none  &trans    &trans        &trans     &trans     &trans    &kp HOME        &kp PAGE_UP     &kp PAGE_DOWN  &kp END    &trans  &trans
&none  &kp LGUI  &kp LEFT_ALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT  &trans  &trans
&none  &trans    &trans        &trans     &trans     &trans    &none           &none           &none          &none      &trans  &trans
                               &trans     &trans     &trans    &trans          &trans          &trans
            >;

            label = "nav";
        };

        mou {
            bindings = <
&trans  &trans    &trans        &trans     &trans     &trans    &trans          &trans          &trans        &trans           &trans  &trans
&trans  &kp LCMD  &kp LEFT_ALT  &kp LCTRL  &kp LSHFT  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans    &trans        &trans     &trans     &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
                                &trans     &trans     &trans    &mkp LCLK       &mkp RCLK       &mkp MCLK
            >;

            label = "mou";
        };

        func {
            bindings = <
&none  &kp F9  &kp F10  &kp F11  &kp F12  &kp C_MUTE           &kp C_PLAY_PAUSE      &none      &none      &none     &none     &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &kp C_VOLUME_UP      &kp C_BRIGHTNESS_INC  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none  &kp F1  &kp F2   &kp F3   &kp F4   &kp C_VOLUME_DOWN    &kp C_BRIGHTNESS_DEC  &none      &none      &none     &none     &none
                        &trans   &trans   &trans               &none                 &none      &none
            >;

            label = "func";
        };

        blu {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans         &bt BT_CLR    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans         &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans         &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans         &trans        &trans  &trans  &trans
            >;

            label = "blu";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_bluetooth {
            timeout-ms = <50>;
            key-positions = <26 27 28>;  // X C V
            bindings = <&mo LYR_BLU>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <20 21>;  // K L
            bindings = <&kp BACKSPACE>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <14 15>;  // S D
            bindings = <&kp TAB>;
        };

        combo_num_ctrl {
            timeout-ms = <50>;
            key-positions = <13 14>;  // A S in num layer
            bindings = <&kp LCTRL>;
            layers = <LYR_NUM>;
        };

        combo_num_backspace {
            timeout-ms = <50>;
            key-positions = <20 21>;  // - and \ (minus and backslash) in num layer
            bindings = <&kp BACKSPACE>;
            layers = <LYR_NUM>;
        };
    };
};
